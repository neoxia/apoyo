---
to: src/utils/authorizer/policy-context.ts
unless_exists: true
---
import { PolicyContext as BasePolicyContext, NotAuthenticatedException } from '@apoyo/policies'

import { User, UserRole } from './user'
import { UserContext } from './user-context'

export class PolicyContext implements BasePolicyContext<User> {
  constructor(private readonly _userContext: UserContext) {}

  public getCurrentUser(): User
  public getCurrentUser(options: { allowGuest: false }): User
  public getCurrentUser(options: { allowGuest: true }): User | null
  public getCurrentUser(options: { allowGuest: boolean } = { allowGuest: false }): User | null {
    const allowGuest = options?.allowGuest ?? false
    const user = this._userContext.getUser()
    if (!allowGuest && !user) {
      throw new NotAuthenticatedException()
    }
    return user
  }

  public isAdmin() {
    return this.getCurrentUser().role === UserRole.ADMIN
  }
}